'use strict';

// Generated by CoffeeScript 2.2.4
(function () {
  // Deps
  var URL,
      bind,
      handleExternal,
      handleInternal,
      isInternal,
      merge,
      mergeSettings,
      settings,
      indexOf = [].indexOf;

  URL = require('url-parse');

  merge = require('lodash/merge');

  // Default settings
  settings = {
    addBlankToExternal: false,
    internalHosts: [typeof location !== "undefined" && location !== null ? location.host : void 0]
  };

  // Override the settings
  mergeSettings = function mergeSettings(choices) {
    return merge(settings, choices);
  };

  // Add listeners to anchors
  bind = function bind(el, binding, vnode) {
    var anchor, href, i, len, ref, results, router, url;
    // Get the router instance
    router = vnode.context.$router;
    ref = el.querySelectorAll('a');
    // Get anchors that have an href
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      anchor = ref[i];
      if (!(href = anchor.getAttribute('href'))) {
        continue;
      }
      url = new URL(href);
      if (isInternal(url)) {
        results.push(handleInternal(anchor, url, router));
      } else {
        results.push(handleExternal(anchor));
      }
    }
    return results;
  };

  // Test if an anchor is an internal link
  isInternal = function isInternal(url) {
    var ref;
    if (url.href.match(/^\/[^\/]/)) {
      // Does it begin with a / and not an //
      return true;
    }
    if (ref = url.host, indexOf.call(settings.internalHosts, ref) >= 0) {
      // Does the host match the comparer
      return true;
    }
  };

  // Add click bindings to internal links that resolve.  Thus, if the Vue doesn't
  // know about a route, it will not be handled by vue-router.  Though it won't
  // open in a new window.
  handleInternal = function handleInternal(anchor, url, router) {
    var route;
    route = {
      path: '' + url.pathname + url.query
    };
    if (router.resolve(route).route.matched.length) {
      return anchor.addEventListener('click', function (e) {
        e.preventDefault();
        return router.push({
          path: '' + url.pathname + url.query
        });
      });
    }
  };

  // Add target blank to external links
  handleExternal = function handleExternal(anchor) {
    if (settings.addBlankToExternal && !anchor.hasAttribute('target')) {
      return anchor.setAttribute('target', '_blank');
    }
  };

  // Directive definition with settings method for overriding the default settings.
  // I'm relying on Browser garbage collection to cleanup listeners.
  module.exports = {
    bind: bind,
    settings: mergeSettings
  };
}).call(undefined);